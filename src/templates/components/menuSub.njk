{% from "components/menuList.njk" import renderMenuList %}
{% set keys = [
  "menuData001","menuData002","menuData003","menuData004",
  "menuData005","menuData006","menuData007","menuData008","menuData009","menuData010",
  "menuData011"
] %}
{% for key in keys %}
  {% set arr = menuData[key] %}
  {{ renderMenuList(arr, loop.index0) }}
{% endfor %}
{% include "components/menuAll.njk" %}
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const dataScripts = Array.from(document.querySelectorAll('script[id^="menu-data-"]'));
    const navEls = Array.from(document.querySelectorAll('.all-menu-wrap'));
    const menus = dataScripts.map(s => {
      try {
        return JSON.parse(s.textContent.trim());
      } catch (e) {
        return null;
      }
    });
    navEls.forEach((navEl, idx) => {
      const menuData = menus[idx];
      if (! menuData) 
        return;
      
      const links = navEl.querySelectorAll('li.depth-3 a[data-index]');
      const imgs = navEl.querySelectorAll('img[data-img-index]');
      const nameEl = navEl.querySelector('.product-name');
      const subs = navEl.querySelectorAll('.guide-sub[data-sub-index]');
      function update(groupIdx, itemIdx) {
        const catg = menuData.categories[0];
        const d2 = catg.depth2List[groupIdx];
        if (! d2) 
          return;
        
        const data = d2.depth3List[itemIdx];
        if (! data) 
          return;
        
        imgs.forEach(img => {
          const i = + img.dataset.imgIndex;
          const it = data.itemList[i];
          if (it) {
            img.src = `/resources/fe/img/product/${
              it.fileName
            }`;
            img.alt = it.alt;
            img
              .parentElement
              .style
              .display = '';
          } else {
            img
              .parentElement
              .style
              .display = 'none';
          }
        });
        nameEl.innerHTML = data.title + (data.tooltipList || []).join('');
        subs.forEach(p => {
          const i = + p.dataset.subIndex;
          p.textContent = data.subs[i] || '';
        });
      }
      links.forEach(link => {
        link.addEventListener('mouseenter', e => {
          e.preventDefault();
          const itemIdx = + link.dataset.index;
          const depth3Li = link.closest('li.depth-3');
          const depth2Li = depth3Li.closest('ul').closest('li');
          const groupIdx = Array.from(depth2Li.parentElement.children).indexOf(depth2Li);
          update(groupIdx, itemIdx);
        });
      });
      // 초기 표시
      update(0, 0);
    });
  });
</script>